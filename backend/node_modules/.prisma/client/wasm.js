
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  fullName: 'fullName',
  email: 'email',
  password: 'password',
  phoneNumber: 'phoneNumber',
  address: 'address',
  role: 'role',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deleted: 'deleted',
  oldData: 'oldData',
  newData: 'newData'
};

exports.Prisma.ChurchIncomeScalarFieldEnum = {
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ChurchIncomeHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ChurchIncomeTypeScalarFieldEnum = {
  id: 'id',
  incomeTypeName: 'incomeTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ChurchSpendingScalarFieldEnum = {
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  bill: 'bill',
  billNumber: 'billNumber',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ChurchSpendingHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  bill: 'bill',
  billNumber: 'billNumber',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ChurchSpendingTypeScalarFieldEnum = {
  id: 'id',
  spendingTypeName: 'spendingTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreIncomeScalarFieldEnum = {
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreIncomeHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreIncomeTypeScalarFieldEnum = {
  id: 'id',
  incomeTypeName: 'incomeTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreSpendingScalarFieldEnum = {
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreSpendingHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.StoreSpendingTypeScalarFieldEnum = {
  id: 'id',
  spendingTypeName: 'spendingTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmIncomeScalarFieldEnum = {
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  amount: 'amount',
  price: 'price',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmIncomeHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  incomeTypeId: 'incomeTypeId',
  detail: 'detail',
  amount: 'amount',
  price: 'price',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmIncomeTypeScalarFieldEnum = {
  id: 'id',
  incomeTypeName: 'incomeTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmSpendingScalarFieldEnum = {
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmSpendingHistoryScalarFieldEnum = {
  revId: 'revId',
  id: 'id',
  spendingTypeId: 'spendingTypeId',
  detail: 'detail',
  funds: 'funds',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.FarmSpendingTypeScalarFieldEnum = {
  id: 'id',
  spendingTypeName: 'spendingTypeName',
  code: 'code',
  description: 'description',
  createAt: 'createAt',
  createBy: 'createBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  CHURCH: 'CHURCH',
  STORE: 'STORE',
  FARM: 'FARM'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserHistory: 'UserHistory',
  ChurchIncome: 'ChurchIncome',
  ChurchIncomeHistory: 'ChurchIncomeHistory',
  ChurchIncomeType: 'ChurchIncomeType',
  ChurchSpending: 'ChurchSpending',
  ChurchSpendingHistory: 'ChurchSpendingHistory',
  ChurchSpendingType: 'ChurchSpendingType',
  StoreIncome: 'StoreIncome',
  StoreIncomeHistory: 'StoreIncomeHistory',
  StoreIncomeType: 'StoreIncomeType',
  StoreSpending: 'StoreSpending',
  StoreSpendingHistory: 'StoreSpendingHistory',
  StoreSpendingType: 'StoreSpendingType',
  FarmIncome: 'FarmIncome',
  FarmIncomeHistory: 'FarmIncomeHistory',
  FarmIncomeType: 'FarmIncomeType',
  FarmSpending: 'FarmSpending',
  FarmSpendingHistory: 'FarmSpendingHistory',
  FarmSpendingType: 'FarmSpendingType'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
